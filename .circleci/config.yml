version: 2.1

# -----
# CircleCI orbs
# -----
orbs:
  win: circleci/windows@2.4.0

# -----
# CircleCI custom commands
# -----
commands:

  # checkout docker_recipes within vsi_common:
  # -- checkout vsi_common master, then navigate to docker_recipes submodule
  #    and checkout current docker_recipes SHA
  # -- requires $VSI_COMMON_DIR to be defined
  # -- allows use of "just" targets as needed (such as "just test recipe")
  checkout_in_vsi_common:
    description: Checkout code in vsi_common
    steps:
      - run:
          name: Checkout code in vsi_common
          command: |
            git clone --recursive https://github.com/VisionSystemsInc/vsi_common.git "${VSI_COMMON_DIR}"
            cd "${VSI_COMMON_DIR}/docker/recipes"
            git checkout "${CIRCLE_SHA1}"

  # run "ci_load" command on user-selected docker-compose file
  # - cache is updated only from master branch of main repo (not forks)
  # - assumes python3 with pyyaml is already available
  # - assumes docker login was successful
  # - required environment variables:
  #     $VSI_COMMON_DIR - location of vsi_common repo
  # - optional enviromment variables
  #     $CI_RECIPE_REPO - dockerhub repo for recipe cache (default "vsiri/ci_cache_recipes")
  #     $CI_RECIPE_VERSION - version string for recipe cache (default "")
  #     $JUST_CI_BRANCH_PUSH - branch (besides master) for dockerhub push
  # - each service identified in the docker-compose file will be separately
  #   built via "${VSI_COMMON_DIR}/linux/ci_load.py"
  # - As we are building recipes themselves, we ignore the vsiri/recipe
  #   dockerhub repo by setting "--recipe-repo" to a dummy variable.
  ci_load:
    description: Build dockers (ci_load)
    parameters:
      step_name:
        description: Step name
        type: string
        default: Build recipes (ci_load)
      compose_file:
        description: docker-compose file
        type: string
    steps:
      - run:
          name: << parameters.step_name >>
          command: |

            set -x

            # push from main repo, master or ${JUST_CI_BRANCH_PUSH} branches
            if [[ "${CIRCLE_PROJECT_USERNAME,,}" == "visionsystemsinc" && \
                  ("${CIRCLE_BRANCH}" == "master" || \
                   "${CIRCLE_BRANCH}" == "${JUST_CI_BRANCH_PUSH-}") ]]
            then
              CI_PUSH_OPT="--push"
            else
              CI_PUSH_OPT="--no-push"
            fi

            # environment
            : ${CI_RECIPE_REPO="vsiri/ci_cache_recipes"}
            : ${CI_RECIPE_VERSION=}
            COMPOSE_FILE="<< parameters.compose_file >>"
            SERVICES=( $(docker-compose -f "${COMPOSE_FILE}" config --services) ) # noquotes

            # ci_load for each service
            for SERVICE in "${SERVICES[@]}"; do
              python3 "${VSI_COMMON_DIR}/linux/ci_load.py" \
                --recipe-repo "IGNORE" \
                ${CI_RECIPE_REPO:+ --cache-repo "${CI_RECIPE_REPO}"} \
                ${CI_RECIPE_VERSION:+ --cache-version "${CI_RECIPE_VERSION}"} \
                --quiet-pull \
                ${CI_PUSH_OPT} \
                "${COMPOSE_FILE}" "${SERVICE}"
            done

# -----
# CircleCI jobs
# -----
jobs:

  # linux docker environment
  build_and_test:
    docker:
      - image: cimg/python:3.8
    shell: /bin/bash -eo pipefail
    working_directory: ~/vsi
    environment:
      VSI_COMMON_DIR: /home/circleci/vsi
      RECIPE_DIR: /home/circleci/vsi/docker/recipes

    steps:

      - run:
          name: Install software
          command: |
            pip3 install pyyaml

      - checkout_in_vsi_common
      - setup_remote_docker

      - run:
          name: Additional setup
          command: |
            docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"

      - ci_load:
          step_name: Build recipes (ci_load)
          compose_file: ${RECIPE_DIR}/docker-compose.yml

      - ci_load:
          step_name: Build tests (ci_load)
          compose_file: ${RECIPE_DIR}/tests/docker-compose.yml

      - run:
          name: Run integration tests
          command: |
            source setup.env
            just test recipe


  # test selected scripts for windows compatibility
  # note 'bash.exe -l' ensures correct operation of utilities like 'find'
  windows_test:
    executor:
      name: win/default
      shell: bash.exe -l
    working_directory: "C:/Users/circleci/vsi"
    environment:
      VSI_COMMON_DIR: "C:/Users/circleci/vsi"
      RECIPE_DIR: "C:/Users/circleci/vsi/docker/recipes"

    steps:
      - run: systeminfo
      - checkout_in_vsi_common

      - run:
          name: Run integration tests
          command: |

            # helper function to run a single test
            # $1 = test file id (e.g., "pipenv" for test-pipenv.bsh)
            # $2 = test description (e.g., "30_get-pipenv" in test-pipenv.bsh)
            run_single_test() {
              TESTLIB_RUN_SINGLE_TEST="${2}" just test recipe "${1}"
            }

            # run selected tests
            source setup.env
            run_single_test pipenv 30_get-pipenv

# -----
# CircleCI workflows
# -----
workflows:
  recipes:
    jobs:
      - build_and_test
      - windows_test
