version: 2.1

# -----
# CircleCI orbs
# -----
orbs:
  win: circleci/windows@2.4.0

# -----
# CircleCI custom commands
# -----
commands:

  # checkout docker_recipes within vsi_common:
  # -- checkout vsi_common main, then navigate to docker_recipes submodule
  #    and checkout current docker_recipes SHA
  # -- requires $VSI_COMMON_DIR to be defined
  # -- allows use of "just" targets as needed (such as "just test recipe")
  checkout_in_vsi_common:
    description: Checkout code in vsi_common
    steps:
      - run:
          name: Checkout code in vsi_common
          command: |
            git clone --recursive https://github.com/VisionSystemsInc/vsi_common.git "${VSI_COMMON_DIR}"
            cd "${VSI_COMMON_DIR}/docker/recipes"
            git checkout "${CIRCLE_SHA1}"

  # docker setup
  # - setup a remote docker environment
  # - dockerhub login using project variables
  # - create a buildx builder using the "docker-container" driver to
  #   take advantage of "cache-to" capabilities.
  # - use of the docker-container driver also requires a local registry when
  #   building test images to be able to source the latest recipe images
  #   (docker-container only uses registry images during the build process)
  setup_docker:
    description: Setup docker
    steps:

      - setup_remote_docker

      - run:
          name: Dockerhub login
          command: echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

      - run:
          name: Buildx with "docker-container" driver
          command: |
            : ${CONTEXT_NAME="ci_builder_context"}
            : ${BUILDER_NAME="ci_builder"}
            : ${BUILDKITD_TOML="${RECIPE_DIR}/.circleci/buildkitd.toml"}
            docker context create "${CONTEXT_NAME}"
            docker buildx create \
                --name "${BUILDER_NAME}" \
                --driver docker-container \
                --driver-opt network=host \
                --config "${BUILDKITD_TOML}" \
                ${CONTEXT_NAME}
            docker buildx use --builder "${BUILDER_NAME}"

      - run:
          name: Start localhost docker registry
          command: |
            : ${COMPOSE_FILE="${RECIPE_DIR}/.circleci/docker-compose.yml"}
            docker compose -f "${COMPOSE_FILE}" up -d

  # run "docker buildx bake" on user-selected docker compose file
  build:
    description: Build dockers (buildx)
    parameters:
      step_name:
        description: Step name
        type: string
        default: Build recipes (buildx)
      step_type:
        description: Build recipe or test
        type: enum
        enum: ["recipe", "test"]
    steps:
      - run:
          name: << parameters.step_name >>
          command: |

            # some push/cache to dockerhub options are enabled only from:
            # - `main` branch of VSI repo
            # - `${CI_BRANCH_PUSH}` branch of VSI repo
            if [[ "${CIRCLE_PROJECT_USERNAME,,}" == "visionsystemsinc" && \
                  ("${CIRCLE_BRANCH}" == "main" || \
                   "${CIRCLE_BRANCH}" == "${CI_BRANCH_PUSH-}") ]]
            then
              PUSH=1
            else
              PUSH=0
            fi

            # options based on "step_type" parameter
            STEP_TYPE="<< parameters.step_type >>"

            if [ "${STEP_TYPE}" == "recipe" ]; then
              COMPOSE_FILE="${RECIPE_DIR}/docker-compose.yml"
              LOCALHOST_PUSH=1  # push to localhost registry needed for tests
              DOCKERHUB_PUSH="${PUSH}"  # push to dockerhub in some cases
              DOCKERHUB_CACHE_TO="${PUSH}"  # cache-to dockerhub in some cases

            elif [ "${STEP_TYPE}" == "test" ]; then
              COMPOSE_FILE="${RECIPE_DIR}/tests/docker-compose.yml"
              LOCALHOST_PUSH=0  # push to localhost registry not needed
              DOCKERHUB_PUSH=0  # push to dockerhub not needed
              DOCKERHUB_CACHE_TO="${PUSH}"  # cache-to dockerhub in some cases

            else
              echo "Unrecognized step type '${STEP_TYPE}'" >&2
              exit 1
            fi

            # report options
            echo "--------------------"
            echo "COMPOSE_FILE=${COMPOSE_FILE}"
            echo "LOCALHOST_PUSH=${LOCALHOST_PUSH}"
            echo "DOCKERHUB_PUSH=${DOCKERHUB_PUSH}"
            echo "DOCKERHUB_CACHE_TO=${DOCKERHUB_CACHE_TO}"
            echo "--------------------"

            # discover services
            SERVICES=( $(docker compose -f "${COMPOSE_FILE}" config --services) ) # noquotes

            # function to discover service image from docker-compose file
            function get_image() {
              docker compose -f "${COMPOSE_FILE}" config --images "${1}"
            }

            # localhost registry
            LOCALHOST_RECIPE_REPO="localhost:5000/recipe"
            LOCALHOST_TEST_REPO="${LOCALHOST_RECIPE_REPO}-test"

            # dockerhub registry
            DOCKERHUB_RECIPE_REPO="vsiri/recipe"
            DOCKERHUB_TEST_REPO="${DOCKERHUB_RECIPE_REPO}-test"

            # dockerhub cache
            DOCKERHUB_CACHE_REPO="${DOCKERHUB_RECIPE_REPO}-cache"

            # build options
            OPTS=(
              -f "${COMPOSE_FILE}"
              --load
              # --progress=plain

              # direct the buildx 'docker-continer' driver to source recipes
              # from the localhost registry (not dockerhub)
              "--set=*.args.VSI_RECIPE_REPO=${LOCALHOST_RECIPE_REPO}"
            )

            # array of docker images to push after build
            IMAGES_TO_PUSH=()

            # cache options
            for SERVICE in "${SERVICES[@]}"; do

              # default image tag (never pushed)
              DEFAULT_TAG="$(get_image "${SERVICE}")"
              OPTS+=( "--set=${SERVICE}.tags=${DEFAULT_TAG}" )

              # optionally tag & push to localhost
              if [ "${LOCALHOST_PUSH-}" == "1" ]; then
                LOCALHOST_TAG="$(VSI_RECIPE_REPO="${LOCALHOST_RECIPE_REPO}" \
                                 VSI_TEST_RECIPE_REPO="${LOCALHOST_TEST_REPO}" \
                                 get_image "${SERVICE}")"
                OPTS+=( "--set=${SERVICE}.tags=${LOCALHOST_TAG}" )
                IMAGES_TO_PUSH+=( "${LOCALHOST_TAG}" )
              fi

              # optionally tag & push to dockerhub
              # (do not push cuda & cudagl images)
              if [ "${DOCKERHUB_PUSH-}" == "1" ] && [[ "${SERVICE}" != *cuda* ]]; then
                DOCKERHUB_TAG="$(VSI_RECIPE_REPO="${DOCKERHUB_RECIPE_REPO}" \
                                 VSI_TEST_RECIPE_REPO="${DOCKERHUB_TEST_REPO}" \
                                 get_image "${SERVICE}")"
                OPTS+=( "--set=${SERVICE}.tags=${DOCKERHUB_TAG}" )
                IMAGES_TO_PUSH+=( "${DOCKERHUB_TAG}" )
              fi

              # service dockerhub cache
              CACHE="${DOCKERHUB_CACHE_REPO}:${SERVICE}"

              # always cache-from
              OPTS+=( "--set=${SERVICE}.cache-from=ref=${CACHE},type=registry" )

              # optionally cache-to
              if [ "${DOCKERHUB_CACHE_TO-}" == "1" ]; then
                OPTS+=( "--set=${SERVICE}.cache-to=ref=${CACHE},type=registry,mode=max,image-manifest=true" )
              fi

            done

            # report & build
            pushd "$(dirname "${COMPOSE_FILE}")" &> /dev/null
              docker buildx bake --print ${OPTS[@]} ${SERVICES[@]}
              docker buildx bake ${OPTS[@]} ${SERVICES[@]}
            popd &> /dev/null

            # report local images
            echo -e "\n----- DOCKER IMAGES -----"
            docker images

            # push images
            for IMAGE in "${IMAGES_TO_PUSH[@]}"; do
              echo -e "\n----- PUSH ${IMAGE} ------"
              docker push "${IMAGE}"
            done


# -----
# CircleCI jobs
# -----
jobs:

  # linux docker environment
  build_and_test:
    docker:
      - image: cimg/python:3.11
    shell: /bin/bash -eo pipefail
    working_directory: ~/vsi
    environment:
      VSI_COMMON_DIR: /home/circleci/vsi
      RECIPE_DIR: /home/circleci/vsi/docker/recipes

    steps:

      - checkout_in_vsi_common
      - setup_docker

      - build:
          step_name: Build recipes (buildx)
          step_type: recipe

      - build:
          step_name: Build tests (buildx)
          step_type: test

      - run:
          name: Run integration tests
          command: |
            source setup.env
            just test recipe


  # test selected scripts for windows compatibility
  # note 'bash.exe -l' ensures correct operation of utilities like 'find'
  windows_test:
    executor:
      name: win/default
      shell: bash.exe -l
    working_directory: "C:/Users/circleci/vsi"
    environment:
      VSI_COMMON_DIR: "C:/Users/circleci/vsi"
      RECIPE_DIR: "C:/Users/circleci/vsi/docker/recipes"

    steps:
      - run: systeminfo
      - checkout_in_vsi_common

      - run:
          name: Run integration tests
          command: |

            # helper function to run a single test
            # $1 = test file id (e.g., "pipenv" for test-pipenv.bsh)
            # $2 = test description (e.g., "30_get-pipenv" in test-pipenv.bsh)
            run_single_test() {
              TESTLIB_RUN_SINGLE_TEST="${2}" just test recipe "${1}"
            }

            # run selected tests
            source setup.env
            run_single_test pipenv 30_get-pipenv

# -----
# CircleCI workflows
# -----
workflows:
  recipes:
    jobs:
      - build_and_test
      # - windows_test
