#!/usr/bin/env sh

# This script should not be sourced, but called, or else bad things could happen.

#*# docker/recipes/get-pipenv

#**
# .. default-domain:: bash
#
# .. _get_pipenv:
#
# ==========
# Get Pipenv
# ==========
#
# .. file:: get_pipenv
#
# Functions to help install pipenv with only python installed and no elevated privileges, no ``pip`` or ``sudo`` required
#
# .. function:: install_pipenv
#
# Install pipenv into a virtualenv. Does not need to have pip already installed and does not use privileged permissions.
#
# :Arguments: [``$1``] - The location of the virtualenv, defaults to ``${PIPENV_VIRTUALENV-${HOME}/pipenv}``
# :Parameters: * ``PIPENV_PYTHON`` - Optionally specify which python you want to use. Default is to favor python3, trying ``python3``, ``python``, then finally falling back to ``python2``.
#              * ``PIPENV_VERSION`` - The version of pipenv to install, defaults - ``2018.11.26``
#              * ``GET_PIP_SCRIPT`` - Name of downloaded get-pip.py, else it will attempt to download it itself.
#**
install_pipenv()
{
  local TMP_DIR="$(mktemp -d)"
  local get_pip="${GET_PIP_SCRIPT-/tmp/pipenv/get-pip.py}"

  mkdir -p "$(dirname "${get_pip}")"

  : ${PIPENV_PYTHON:="$( (command -v python3 || command -v python || command -v python2) | head -n 1)"}
  [ -n "${PIPENV_PYTHON}" ] # Make sure python was found

  if [ ! -r "${get_pip}" ]; then
    get_pip="${TMP_DIR}/get-pip.py"
    nl='
'
    "${PIPENV_PYTHON}" -c "try: import urllib2 as u${nl}except: import urllib.request as u${nl}import sys; fid=open(sys.argv[1], 'wb'); fid.write(u.urlopen('https://bootstrap.pypa.io/get-pip.py').read())" "${get_pip}"
  fi

  # Virtualenv version 20 (the rewrite from scratch) has distlib as a
  # sub-dependency. And distlib NEEDS to use setuptools to install. The problem
  # is get-pip is designed only to install pip, not an arbitary packages, which
  # is how I purposefully misuse it.
  # The problem is the root dir's site_packages needs to be in the PYTHONPATH
  # in order to trick this into working. So figure out the site packages dir
  # add it to the python path, and install virtualenv and it's distlib
  # dependency, that will now have the freshly installed setuptools in the
  # PYTHONPATH
  "${PIPENV_PYTHON}" "${get_pip}" --no-cache-dir -I --prefix "${TMP_DIR}/1" pip

  # Unfortunately, when we ask site.getsitepackages() for the answer, none of
  # them are right anymore. For some reason this broke. Replacing with --prefix
  # instead of --root, and using os.walk (aka find) instead of using site.

  # In order to get python to use our custom root dir, we must set the PYTHONPATH to its
  # site-packages directory.
  # Find the directory containing the pip dir, that's site-packages
  PIP_SITE_PACKAGES="$("${PIPENV_PYTHON}" -c "if True:
          import os
          for root, dirs, files in os.walk('${TMP_DIR}/1'):
            if 'pip' in dirs:
              print(root)
              break")"

  if [ "${PIP_SITE_PACKAGES}" = "" ]; then
    echo "Could not find the site-packages directory, something went wrong with PIP_SITE_PACKAGES" >&2
    exit 1
  fi

  # Install virtualenv, which now needs setuptools, so I have to do this here
  # instead of the get_pip above, now that I put the root dir's site-packages
  # in the PYTHONPATH
  PYTHONPATH="${PIP_SITE_PACKAGES}" "${PIPENV_PYTHON}" "${get_pip}" --no-cache-dir -I --prefix "${TMP_DIR}/2" virtualenv
  # This next line won't work if virtualenv is installed in the system's
  # python... However the previous method works perfectly, so use that.
  # PYTHONPATH="${SITE_PACKAGES}" "${PIPENV_PYTHON}" "${SCRIPTS}/pip" install --root "${TMP_DIR}" virtualenv

  # With PYTHONPATH set, we can ask pip where the scipts directory is (a find would also work)
  SCRIPTS="$(PYTHONPATH="${PIP_SITE_PACKAGES}" "${PIPENV_PYTHON}" -c "if True:
          from pip._internal import locations
          print(locations.distutils_scheme('', prefix='${TMP_DIR}/2')['scripts'])")"

  VIRTUALENV_SITE_PACKAGES="$("${PIPENV_PYTHON}" -c "if True:
      import os
      for root, dirs, files in os.walk('${TMP_DIR}/2'):
        if 'virtualenv' in dirs:
          print(root)
          break")"

  if [ "${VIRTUALENV_SITE_PACKAGES}" = "" ]; then
    echo "Could not find the site-packages directory, something went wrong with VIRTUALENV_SITE_PACKAGES" >&2
    exit 1
  fi

  # Create a virtualenv and install pipenv into it
  PYTHONPATH="${VIRTUALENV_SITE_PACKAGES}" "${SCRIPTS}/virtualenv" "${1-${PIPENV_VIRTUALENV-${HOME}/pipenv}}"
  "${1-${PIPENV_VIRTUALENV-${HOME}/pipenv}}/bin/pip" install --no-cache-dir pipenv=="${PIPENV_VERSION-2020.8.13}"
  rm -rf "${get_pip}" "${TMP_DIR}"
}

#**
# .. function:: setup_container_pipenv
#
# Sets up some additional behavior, useful in a container. Creates a symlink in the path to ``pipenv`` and adds a ``fake_package`` script to the bin directory for faking out local packages in pipenv during container build stages.
#
# :Arguments: * [``$1``] - The location of the virtualenv, defaults to ``${HOME}/pipenv``
#             * [``$2``] - The location of the symlink for pipenv, defaults to ``/usr/local/bin/pipenv``
#**
setup_container_pipenv()
{
  ln -s "${1-${PIPENV_VIRTUALENV-${HOME}/pipenv}}/bin/pipenv" "${2-/usr/local/bin/pipenv}"

  cat - > "${1-${PIPENV_VIRTUALENV-${HOME}/pipenv}}/bin/fake_package" << "EOF"
#!/usr/bin/env sh

set -eu

# Useful for creating a fake editable package for when you plan on mounting it
# in at runtime
# $1 - name
# $2 - subdir

mkdir -p "${2-${1}}"
touch "${2-${1}}/init.py"
if [ ! -e "setup.py" ]; then
  echo "from distutils.core import setup" > setup.py
  echo "setup(name='${1}', packages=['${2-${1}}'], description='Project')" >> setup.py
fi
EOF
  chmod 755 "${1-${PIPENV_VIRTUALENV-${HOME}/pipenv}}/bin/fake_package"
}

if [ -n "${BASH_SOURCE+set}" ]; then
  if [ "${BASH_SOURCE[0]}" = "${0}" ] || [ "$(basename "${BASH_SOURCE[0]}")" = "${0}" ]; then
    set -eu
    install_pipenv ${@+"${@}"}
    setup_container_pipenv ${@+"${@}"}
    # Self delete this file, so that pipenv doesn't try to get installed twice if
    # /usr/local/share/just/container_build_patch/* is called twice
    exec bash -c "rm '${BASH_SOURCE[0]}'"
  fi
else
  case "${0}" in
    *30_get-pipenv) # Ran
      set -eu
      install_pipenv ${@+"${@}"}
      setup_container_pipenv ${@+"${@}"}
      # sh doesn't have BASH_SOURCE or exact equivalent, this is closest, unless
      # they are sourcing it, then bad things can happen, hence the guards
      exec bash -c "rm '${0}'"
      ;;
    *sh) # Sourced for sh/dash/etc...
      ;;
  esac
fi
