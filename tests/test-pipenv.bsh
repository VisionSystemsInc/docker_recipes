#!/usr/bin/env bash

if [ -z "${VSI_COMMON_DIR+set}" ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"

: ${DOCKER=docker}

# test pipenv version in docker
if ! command -v "${DOCKER}" &> /dev/null; then
  skip_next_test
fi
begin_test "Pipenv"
(
  setup_test

  RESULT=$(docker run --rm vsiri/test_recipe:test_pipenv bash -c 'head -n1 /foo/bin/pipenv; readlink /foo/bin/python; /foo/bin/pipenv --version')
  [ "${RESULT}" = $'#!/foo/bin/python\n/bar\npipenv, version 2020.8.13' ]

)
end_test

# test 30_get-pipenv script without a container
if ! ( command -v "${PIPENV_PYTHON-python}" &>/dev/null || command -v python3 &>/dev/null ); then
  skip_next_test
fi
begin_test "30_get-pipenv"
(
  setup_test

  # test version
  export RECIPE_PIPENV_VERSION="2020.8.13"

  # locale
  EN_US_UTF8="$( (locale -a | grep -iE "en_us\.utf-?8") 2>/dev/null || :)"
  if [ -n "${EN_US_UTF8}" ]; then
    export LC_ALL="${EN_US_UTF8}"
    export LANG="${EN_US_UTF8}"
  else
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
  fi

  # ensure mktemp commands are redirected to ${TESTDIR}
  # (including mktemp inside 30_get-pipenv)
  export TMPDIR="${TESTDIR}"

  # output directory
  OUTPUT_DIR="$(mktemp -d)"

  # install virtualenv with pipenv to TEMP_DIR
  source "${VSI_COMMON_DIR}/docker/recipes/30_get-pipenv"
  install_pipenv "${OUTPUT_DIR}"

  # expected pipenv executable
  if [ "${OS-}" = "Windows_NT" ]; then
    PIPENV="${OUTPUT_DIR}/Scripts/pipenv.exe"
  else
    PIPENV="${OUTPUT_DIR}/bin/pipenv"
  fi

  # test for conflict with PIPENV_{FLAG_NAME} environment variables
  # https://github.com/pypa/pipenv/blob/master/CHANGELOG.rst#features--improvements-4
  # For example, if we define the variable
  #   PIPENV_VERSION=2020.8.13
  # pipenv calls will fail with the error
  #   Error: Invalid value for '--version': 2020.8.13 is not a valid boolean
  RESULT="$("${PIPENV}")"

  # pipenv version
  RESULT="$("${PIPENV}" --version | sed 's|\r||g')"

  # cleanup
  rm -rf "${OUTPUT_DIR}"

  # test
  [ "${RESULT}" = 'pipenv, version 2020.8.13' ]
)
end_test

if [ "${BASH_VERSINFO[0]}${BASH_VERSINFO[1]}" -le "42" ]; then
  skip_next_test
fi
begin_test "Get pipenv non-DRY functions"
(
  setup_test
  declare -A function_prototypes

  functions=(download_to_stdout_wget
             download_to_stdout_curl
             download_to_stdout_python
             download_to_file_python
             download_to_file
             #  download_to_stdout_ruby
             #  download_to_stdout_perl
            )

  source "${VSI_COMMON_DIR}/docker/recipes/30_get-pipenv"

  # Store copies of functions loaded from VSI_COMMON_DIR
  for function_name in "${functions[@]}" download_to_stdout_ruby download_to_stdout_perl; do
    function_prototypes[${function_name}]="$(declare -pf "${function_name}")"
    unset "${function_name}"
  done

  VSI_COMMON_DIR=/dev/null source "${VSI_COMMON_DIR}/docker/recipes/30_get-pipenv"

  for function_name in "${functions[@]}"; do
    [ "$(declare -pf "${function_name}")" = "${function_prototypes[${function_name}]}" ]
  done

  # These aren't includes, because python is installed, and they aren't needed
  # unless there's a reason to include these, then change this test
  [ "$(declare -pf "download_to_stdout_ruby")" != "${function_prototypes[download_to_stdout_ruby]}" ]
  [ "$(declare -pf "download_to_stdout_perl")" != "${function_prototypes[download_to_stdout_perl]}" ]
)
end_test
