#!/usr/bin/env bash

if [ -z ${VSI_COMMON_DIR+set} ]; then
  VSI_COMMON_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../.."; pwd)"
fi

source "${VSI_COMMON_DIR}/tests/testlib.bsh"

: ${DOCKER=docker}

# test pipenv version in docker
command -v "${DOCKER}" &> /dev/null || skip_next_test
begin_test "Pipenv"
(
  setup_test

  RESULT=$(docker run --rm vsiri/test_recipe:test_pipenv bash -c 'head -n1 /foo/bin/pipenv; readlink /foo/bin/python; /foo/bin/pipenv --version')
  [ "$RESULT" = $'#!/foo/bin/python\n/bar\npipenv, version 2018.05.18' ]

)
end_test

# test 30_get-pipenv script without a container
command -v "${PIPENV_PYTHON-python}" &>/dev/null || command -v python3 &>/dev/null || skip_next_test
begin_test "30_get-pipenv"
(
  setup_test

  # test version
  export PIPENV_VERSION="2020.8.13"

  # locale
  EN_US_UTF8="$( (locale -a | grep -iE "en_us\.utf-?8") 2>/dev/null || :)"
  if [ -n "${EN_US_UTF8}" ]; then
    export LC_ALL="${EN_US_UTF8}"
    export LANG="${EN_US_UTF8}"
  else
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
  fi

  # ensure mktemp commands are redirected to $TESTDIR
  # (including mktemp inside 30_get-pipenv)
  export TMPDIR="${TESTDIR}"

  # output directory
  OUTPUT_DIR="$(mktemp -d)"

  # install virtualenv with pipenv to TEMP_DIR
  source "${VSI_COMMON_DIR}/docker/recipes/30_get-pipenv"
  install_pipenv "${OUTPUT_DIR}"

  # expected pipenv executable
  if [ "${OS-}" = "Windows_NT" ]; then
    PIPENV="${OUTPUT_DIR}/Scripts/pipenv.exe"
  else
    PIPENV="${OUTPUT_DIR}/bin/pipenv"
  fi

  # pipenv result
  RESULT="$("${PIPENV}" --version | sed 's|\r||g')"

  # cleanup
  rm -rf "${OUTPUT_DIR}"

  # test
  [ "$RESULT" = 'pipenv, version 2020.8.13' ]
)
end_test